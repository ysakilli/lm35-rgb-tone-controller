CCS PCM C Compiler, Version 5.007, 61971               04-Ara-18 11:52

               Filename:   C:\Users\serka\Desktop\LED KÜP YAZILIM\led.lst

               ROM used:   2238 words (27%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           48 (13%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   41F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   042
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  28
0036:  RETLW  0C
0037:  RETLW  01
0038:  RETLW  06
0039:  DATA 8A,29
003A:  DATA 45,29
003B:  DATA 4B,27
003C:  DATA AD,20
003D:  DATA D2,24
003E:  DATA C6,16
003F:  DATA D9,2A
0040:  DATA D3,2A
0041:  DATA 46,00
*
008F:  DATA 8C,29
0090:  DATA C9,21
0091:  DATA C1,25
0092:  DATA CC,24
0093:  DATA 4B,00
*
016C:  MOVF   0B,W
016D:  MOVWF  31
016E:  BCF    0B.7
016F:  BSF    03.5
0170:  BSF    03.6
0171:  BSF    0C.7
0172:  BSF    0C.0
0173:  NOP
0174:  NOP
0175:  BCF    03.5
0176:  MOVF   0C,W
0177:  ANDLW  7F
0178:  BTFSC  03.2
0179:  GOTO   1B3
017A:  BCF    03.6
017B:  MOVWF  32
017C:  BSF    03.6
017D:  MOVF   0D,W
017E:  BCF    03.6
017F:  MOVWF  33
0180:  BSF    03.6
0181:  MOVF   0F,W
0182:  BCF    03.6
0183:  MOVWF  34
0184:  MOVF   32,W
0185:  MOVWF  3E
0186:  CALL   140
0187:  MOVF   33,W
0188:  BSF    03.6
0189:  MOVWF  0D
018A:  BCF    03.6
018B:  MOVF   34,W
018C:  BSF    03.6
018D:  MOVWF  0F
018E:  BSF    03.5
018F:  BSF    0C.7
0190:  BSF    0C.0
0191:  NOP
0192:  NOP
0193:  BCF    03.5
0194:  RLF    0C,W
0195:  RLF    0E,W
0196:  ANDLW  7F
0197:  BTFSC  03.2
0198:  GOTO   1B3
0199:  BCF    03.6
019A:  MOVWF  32
019B:  BSF    03.6
019C:  MOVF   0D,W
019D:  BCF    03.6
019E:  MOVWF  33
019F:  BSF    03.6
01A0:  MOVF   0F,W
01A1:  BCF    03.6
01A2:  MOVWF  34
01A3:  MOVF   32,W
01A4:  MOVWF  3E
01A5:  CALL   140
01A6:  MOVF   33,W
01A7:  BSF    03.6
01A8:  MOVWF  0D
01A9:  BCF    03.6
01AA:  MOVF   34,W
01AB:  BSF    03.6
01AC:  MOVWF  0F
01AD:  INCF   0D,F
01AE:  BTFSC  03.2
01AF:  INCF   0F,F
01B0:  BCF    03.6
01B1:  GOTO   16F
01B2:  BSF    03.6
01B3:  BCF    03.6
01B4:  BTFSC  31.7
01B5:  BSF    0B.7
01B6:  RETURN
01B7:  MOVF   3E,W
01B8:  BTFSC  03.2
01B9:  GOTO   227
01BA:  MOVWF  46
01BB:  MOVF   42,W
01BC:  BTFSC  03.2
01BD:  GOTO   227
01BE:  ADDWF  46,F
01BF:  BTFSC  03.0
01C0:  GOTO   1C8
01C1:  MOVLW  7F
01C2:  SUBWF  46,F
01C3:  BTFSS  03.0
01C4:  GOTO   227
01C5:  BTFSC  03.2
01C6:  GOTO   227
01C7:  GOTO   1CC
01C8:  MOVLW  81
01C9:  ADDWF  46,F
01CA:  BTFSC  03.0
01CB:  GOTO   227
01CC:  MOVF   46,W
01CD:  MOVWF  77
01CE:  CLRF   78
01CF:  CLRF   79
01D0:  CLRF   7A
01D1:  MOVF   3F,W
01D2:  MOVWF  4A
01D3:  BSF    4A.7
01D4:  MOVF   40,W
01D5:  MOVWF  49
01D6:  MOVF   41,W
01D7:  MOVWF  48
01D8:  MOVLW  18
01D9:  MOVWF  46
01DA:  CLRF   47
01DB:  BTFSS  48.0
01DC:  GOTO   1F5
01DD:  MOVF   45,W
01DE:  ADDWF  7A,F
01DF:  BTFSS  03.0
01E0:  GOTO   1E7
01E1:  INCF   79,F
01E2:  BTFSS  03.2
01E3:  GOTO   1E7
01E4:  INCF   78,F
01E5:  BTFSC  03.2
01E6:  BSF    47.7
01E7:  MOVF   44,W
01E8:  ADDWF  79,F
01E9:  BTFSS  03.0
01EA:  GOTO   1EE
01EB:  INCF   78,F
01EC:  BTFSC  03.2
01ED:  BSF    47.7
01EE:  MOVF   43,W
01EF:  MOVWF  40
01F0:  BSF    40.7
01F1:  MOVF   40,W
01F2:  ADDWF  78,F
01F3:  BTFSC  03.0
01F4:  BSF    47.7
01F5:  RLF    47,F
01F6:  RRF    78,F
01F7:  RRF    79,F
01F8:  RRF    7A,F
01F9:  RRF    4A,F
01FA:  RRF    49,F
01FB:  RRF    48,F
01FC:  BCF    03.0
01FD:  DECFSZ 46,F
01FE:  GOTO   1DA
01FF:  MOVLW  01
0200:  ADDWF  77,F
0201:  BTFSC  03.0
0202:  GOTO   227
0203:  BTFSC  78.7
0204:  GOTO   20C
0205:  RLF    4A,F
0206:  RLF    7A,F
0207:  RLF    79,F
0208:  RLF    78,F
0209:  DECF   77,F
020A:  BTFSC  03.2
020B:  GOTO   227
020C:  BTFSS  4A.7
020D:  GOTO   21D
020E:  INCF   7A,F
020F:  BTFSS  03.2
0210:  GOTO   21D
0211:  INCF   79,F
0212:  BTFSS  03.2
0213:  GOTO   21D
0214:  INCF   78,F
0215:  BTFSS  03.2
0216:  GOTO   21D
0217:  RRF    78,F
0218:  RRF    79,F
0219:  RRF    7A,F
021A:  INCF   77,F
021B:  BTFSC  03.2
021C:  GOTO   227
021D:  MOVF   3F,W
021E:  MOVWF  47
021F:  MOVF   43,W
0220:  XORWF  47,F
0221:  BTFSS  47.7
0222:  GOTO   225
0223:  BSF    78.7
0224:  GOTO   22B
0225:  BCF    78.7
0226:  GOTO   22B
0227:  CLRF   77
0228:  CLRF   78
0229:  CLRF   79
022A:  CLRF   7A
022B:  RETURN
*
0239:  MOVLW  8E
023A:  MOVWF  77
023B:  MOVF   32,W
023C:  MOVWF  78
023D:  MOVF   31,W
023E:  MOVWF  79
023F:  CLRF   7A
0240:  MOVF   78,F
0241:  BTFSS  03.2
0242:  GOTO   24D
0243:  MOVF   79,W
0244:  MOVWF  78
0245:  CLRF   79
0246:  MOVLW  08
0247:  SUBWF  77,F
0248:  MOVF   78,F
0249:  BTFSS  03.2
024A:  GOTO   24D
024B:  CLRF   77
024C:  GOTO   255
024D:  BCF    03.0
024E:  BTFSC  78.7
024F:  GOTO   254
0250:  RLF    79,F
0251:  RLF    78,F
0252:  DECF   77,F
0253:  GOTO   24D
0254:  BCF    78.7
*
0286:  BTFSC  03.1
0287:  GOTO   28B
0288:  MOVLW  46
0289:  MOVWF  04
028A:  BCF    03.7
028B:  CLRF   77
028C:  CLRF   78
028D:  CLRF   79
028E:  CLRF   7A
028F:  CLRF   46
0290:  CLRF   47
0291:  CLRF   48
0292:  CLRF   49
0293:  MOVF   45,W
0294:  IORWF  44,W
0295:  IORWF  43,W
0296:  IORWF  42,W
0297:  BTFSC  03.2
0298:  GOTO   2C9
0299:  MOVLW  20
029A:  MOVWF  4A
029B:  BCF    03.0
029C:  RLF    3E,F
029D:  RLF    3F,F
029E:  RLF    40,F
029F:  RLF    41,F
02A0:  RLF    46,F
02A1:  RLF    47,F
02A2:  RLF    48,F
02A3:  RLF    49,F
02A4:  MOVF   45,W
02A5:  SUBWF  49,W
02A6:  BTFSS  03.2
02A7:  GOTO   2B2
02A8:  MOVF   44,W
02A9:  SUBWF  48,W
02AA:  BTFSS  03.2
02AB:  GOTO   2B2
02AC:  MOVF   43,W
02AD:  SUBWF  47,W
02AE:  BTFSS  03.2
02AF:  GOTO   2B2
02B0:  MOVF   42,W
02B1:  SUBWF  46,W
02B2:  BTFSS  03.0
02B3:  GOTO   2C3
02B4:  MOVF   42,W
02B5:  SUBWF  46,F
02B6:  MOVF   43,W
02B7:  BTFSS  03.0
02B8:  INCFSZ 43,W
02B9:  SUBWF  47,F
02BA:  MOVF   44,W
02BB:  BTFSS  03.0
02BC:  INCFSZ 44,W
02BD:  SUBWF  48,F
02BE:  MOVF   45,W
02BF:  BTFSS  03.0
02C0:  INCFSZ 45,W
02C1:  SUBWF  49,F
02C2:  BSF    03.0
02C3:  RLF    77,F
02C4:  RLF    78,F
02C5:  RLF    79,F
02C6:  RLF    7A,F
02C7:  DECFSZ 4A,F
02C8:  GOTO   29B
02C9:  MOVF   46,W
02CA:  MOVWF  00
02CB:  INCF   04,F
02CC:  MOVF   47,W
02CD:  MOVWF  00
02CE:  INCF   04,F
02CF:  MOVF   48,W
02D0:  MOVWF  00
02D1:  INCF   04,F
02D2:  MOVF   49,W
02D3:  MOVWF  00
02D4:  RETURN
02D5:  MOVF   04,W
02D6:  MOVWF  36
02D7:  MOVF   35,W
02D8:  MOVWF  38
02D9:  BTFSC  03.2
02DA:  GOTO   2F4
02DB:  MOVF   34,W
02DC:  MOVWF  41
02DD:  MOVF   33,W
02DE:  MOVWF  40
02DF:  MOVF   32,W
02E0:  MOVWF  3F
02E1:  MOVF   31,W
02E2:  MOVWF  3E
02E3:  CLRF   45
02E4:  CLRF   44
02E5:  MOVLW  20
02E6:  MOVWF  43
02E7:  MOVLW  82
02E8:  MOVWF  42
02E9:  CALL   1B7
02EA:  MOVF   7A,W
02EB:  MOVWF  34
02EC:  MOVF   79,W
02ED:  MOVWF  33
02EE:  MOVF   78,W
02EF:  MOVWF  32
02F0:  MOVF   77,W
02F1:  MOVWF  31
02F2:  DECFSZ 38,F
02F3:  GOTO   2DB
02F4:  MOVF   34,W
02F5:  MOVWF  41
02F6:  MOVF   33,W
02F7:  MOVWF  40
02F8:  MOVF   32,W
02F9:  MOVWF  3F
02FA:  MOVF   31,W
02FB:  MOVWF  3E
02FC:  MOVF   3E,W
02FD:  SUBLW  B6
02FE:  MOVWF  3E
02FF:  CLRF   7A
0300:  MOVF   3F,W
0301:  MOVWF  42
0302:  BSF    3F.7
0303:  BCF    03.0
0304:  RRF    3F,F
0305:  RRF    40,F
0306:  RRF    41,F
0307:  RRF    7A,F
0308:  RRF    79,F
0309:  RRF    78,F
030A:  RRF    77,F
030B:  DECFSZ 3E,F
030C:  GOTO   303
030D:  BTFSS  42.7
030E:  GOTO   31A
030F:  COMF   77,F
0310:  COMF   78,F
0311:  COMF   79,F
0312:  COMF   7A,F
0313:  INCF   77,F
0314:  BTFSC  03.2
0315:  INCF   78,F
0316:  BTFSC  03.2
0317:  INCF   79,F
0318:  BTFSC  03.2
0319:  INCF   7A,F
031A:  MOVF   7A,W
031B:  MOVWF  34
031C:  MOVF   79,W
031D:  MOVWF  33
031E:  MOVF   78,W
031F:  MOVWF  32
0320:  MOVF   77,W
0321:  MOVWF  31
0322:  BTFSS  34.7
0323:  GOTO   331
0324:  DECF   36,F
0325:  BSF    36.5
0326:  COMF   31,F
0327:  COMF   32,F
0328:  COMF   33,F
0329:  COMF   34,F
032A:  INCF   31,F
032B:  BTFSC  03.2
032C:  INCF   32,F
032D:  BTFSC  03.2
032E:  INCF   33,F
032F:  BTFSC  03.2
0330:  INCF   34,F
0331:  MOVLW  3B
0332:  MOVWF  3D
0333:  MOVLW  9A
0334:  MOVWF  3C
0335:  MOVLW  CA
0336:  MOVWF  3B
0337:  CLRF   3A
0338:  MOVLW  0A
0339:  MOVWF  38
033A:  MOVF   35,W
033B:  BTFSC  03.2
033C:  INCF   36,F
033D:  BSF    03.1
033E:  MOVLW  31
033F:  MOVWF  04
0340:  BCF    03.7
0341:  MOVF   34,W
0342:  MOVWF  41
0343:  MOVF   33,W
0344:  MOVWF  40
0345:  MOVF   32,W
0346:  MOVWF  3F
0347:  MOVF   31,W
0348:  MOVWF  3E
0349:  MOVF   3D,W
034A:  MOVWF  45
034B:  MOVF   3C,W
034C:  MOVWF  44
034D:  MOVF   3B,W
034E:  MOVWF  43
034F:  MOVF   3A,W
0350:  MOVWF  42
0351:  CALL   286
0352:  MOVF   78,W
0353:  MOVF   77,F
0354:  BTFSS  03.2
0355:  GOTO   369
0356:  INCF   35,W
0357:  SUBWF  38,W
0358:  BTFSC  03.2
0359:  GOTO   369
035A:  MOVF   36,W
035B:  BTFSC  03.2
035C:  GOTO   36B
035D:  ANDLW  0F
035E:  SUBWF  38,W
035F:  BTFSC  03.2
0360:  GOTO   363
0361:  BTFSC  03.0
0362:  GOTO   39B
0363:  BTFSC  36.7
0364:  GOTO   39B
0365:  BTFSC  36.6
0366:  GOTO   36B
0367:  MOVLW  20
0368:  GOTO   397
0369:  MOVLW  20
036A:  ANDWF  36,F
036B:  BTFSS  36.5
036C:  GOTO   379
036D:  BCF    36.5
036E:  MOVF   35,W
036F:  BTFSS  03.2
0370:  DECF   36,F
0371:  MOVF   77,W
0372:  MOVWF  36
0373:  MOVLW  2D
0374:  MOVWF  3E
0375:  CALL   140
0376:  MOVF   36,W
0377:  MOVWF  77
0378:  CLRF   36
0379:  MOVF   35,W
037A:  SUBWF  38,W
037B:  BTFSS  03.2
037C:  GOTO   387
037D:  MOVF   77,W
037E:  MOVWF  36
037F:  MOVLW  2E
0380:  MOVWF  3E
0381:  CALL   140
0382:  MOVF   36,W
0383:  MOVWF  77
0384:  MOVLW  20
0385:  ANDWF  36,F
0386:  MOVLW  00
0387:  MOVLW  30
0388:  BTFSS  36.5
0389:  GOTO   397
038A:  BCF    36.5
038B:  MOVF   35,W
038C:  BTFSS  03.2
038D:  DECF   36,F
038E:  MOVF   77,W
038F:  MOVWF  36
0390:  MOVLW  2D
0391:  MOVWF  3E
0392:  CALL   140
0393:  MOVF   36,W
0394:  MOVWF  77
0395:  CLRF   36
0396:  MOVLW  30
0397:  ADDWF  77,F
0398:  MOVF   77,W
0399:  MOVWF  3E
039A:  CALL   140
039B:  BCF    03.1
039C:  MOVF   3D,W
039D:  MOVWF  41
039E:  MOVF   3C,W
039F:  MOVWF  40
03A0:  MOVF   3B,W
03A1:  MOVWF  3F
03A2:  MOVF   3A,W
03A3:  MOVWF  3E
03A4:  CLRF   45
03A5:  CLRF   44
03A6:  CLRF   43
03A7:  MOVLW  0A
03A8:  MOVWF  42
03A9:  CALL   286
03AA:  MOVF   7A,W
03AB:  MOVWF  3D
03AC:  MOVF   79,W
03AD:  MOVWF  3C
03AE:  MOVF   78,W
03AF:  MOVWF  3B
03B0:  MOVF   77,W
03B1:  MOVWF  3A
03B2:  DECFSZ 38,F
03B3:  GOTO   33D
03B4:  BCF    0A.3
03B5:  BCF    0A.4
03B6:  GOTO   3C8 (RETURN)
*
03E0:  MOVF   32,W
03E1:  MOVWF  39
03E2:  MOVF   36,W
03E3:  XORWF  39,F
03E4:  BTFSS  39.7
03E5:  GOTO   3EB
03E6:  BCF    03.2
03E7:  BCF    03.0
03E8:  BTFSC  32.7
03E9:  BSF    03.0
03EA:  GOTO   41E
03EB:  MOVF   32,W
03EC:  MOVWF  39
03ED:  MOVF   35,W
03EE:  MOVWF  3A
03EF:  MOVF   31,W
03F0:  SUBWF  3A,F
03F1:  BTFSC  03.2
03F2:  GOTO   3F9
03F3:  BTFSS  39.7
03F4:  GOTO   41E
03F5:  MOVF   03,W
03F6:  XORLW  01
03F7:  MOVWF  03
03F8:  GOTO   41E
03F9:  MOVF   36,W
03FA:  MOVWF  3A
03FB:  MOVF   32,W
03FC:  SUBWF  3A,F
03FD:  BTFSC  03.2
03FE:  GOTO   405
03FF:  BTFSS  39.7
0400:  GOTO   41E
0401:  MOVF   03,W
0402:  XORLW  01
0403:  MOVWF  03
0404:  GOTO   41E
0405:  MOVF   37,W
0406:  MOVWF  3A
0407:  MOVF   33,W
0408:  SUBWF  3A,F
0409:  BTFSC  03.2
040A:  GOTO   411
040B:  BTFSS  39.7
040C:  GOTO   41E
040D:  MOVF   03,W
040E:  XORLW  01
040F:  MOVWF  03
0410:  GOTO   41E
0411:  MOVF   38,W
0412:  MOVWF  3A
0413:  MOVF   34,W
0414:  SUBWF  3A,F
0415:  BTFSC  03.2
0416:  GOTO   41D
0417:  BTFSS  39.7
0418:  GOTO   41E
0419:  MOVF   03,W
041A:  XORLW  01
041B:  MOVWF  03
041C:  GOTO   41E
041D:  BCF    03.0
041E:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #device ADC=10  
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG,NOCPD 
....................  
.................... #use delay (clock=4000000) 
*
0094:  MOVLW  3F
0095:  MOVWF  04
0096:  BCF    03.7
0097:  MOVF   00,W
0098:  BTFSC  03.2
0099:  GOTO   0A8
009A:  MOVLW  01
009B:  MOVWF  78
009C:  CLRF   77
009D:  DECFSZ 77,F
009E:  GOTO   09D
009F:  DECFSZ 78,F
00A0:  GOTO   09C
00A1:  MOVLW  4A
00A2:  MOVWF  77
00A3:  DECFSZ 77,F
00A4:  GOTO   0A3
00A5:  GOTO   0A6
00A6:  DECFSZ 00,F
00A7:  GOTO   09A
00A8:  RETURN
....................  
.................... #define preload 65458 
.................... #define red pin_e0 
.................... #define green pin_e1 
.................... #define blue pin_e2 
.................... #define use_portb_lcd TRUE   
....................  
.................... #include <lcd.c>   
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00C1:  MOVLW  0F
00C2:  BSF    03.5
00C3:  ANDWF  06,W
00C4:  IORLW  F0
00C5:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00C6:  BCF    03.5
00C7:  BSF    06.2
....................    delay_cycles(1); 
00C8:  NOP
....................    lcd_output_enable(1); 
00C9:  BSF    06.0
....................    delay_cycles(1); 
00CA:  NOP
....................    high = lcd_read_nibble(); 
00CB:  CALL   0B5
00CC:  MOVF   78,W
00CD:  MOVWF  46
....................        
....................    lcd_output_enable(0); 
00CE:  BCF    06.0
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_enable(1); 
00D0:  BSF    06.0
....................    delay_us(1); 
00D1:  NOP
....................    low = lcd_read_nibble(); 
00D2:  CALL   0B5
00D3:  MOVF   78,W
00D4:  MOVWF  45
....................        
....................    lcd_output_enable(0); 
00D5:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00D6:  MOVLW  0F
00D7:  BSF    03.5
00D8:  ANDWF  06,W
00D9:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00DA:  BCF    03.5
00DB:  SWAPF  46,W
00DC:  MOVWF  77
00DD:  MOVLW  F0
00DE:  ANDWF  77,F
00DF:  MOVF   77,W
00E0:  IORWF  45,W
00E1:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00B5:  MOVF   06,W
00B6:  MOVWF  77
00B7:  SWAPF  06,W
00B8:  ANDLW  0F
00B9:  MOVWF  78
....................   #endif 
00BA:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00A9:  SWAPF  46,W
00AA:  ANDLW  F0
00AB:  MOVWF  77
00AC:  MOVLW  0F
00AD:  ANDWF  06,W
00AE:  IORWF  77,W
00AF:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
00B0:  NOP
....................    lcd_output_enable(1); 
00B1:  BSF    06.0
....................    delay_us(2); 
00B2:  GOTO   0B3
....................    lcd_output_enable(0); 
00B3:  BCF    06.0
00B4:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00BB:  BSF    03.5
00BC:  BCF    06.0
....................    lcd_rs_tris(); 
00BD:  BCF    06.1
....................    lcd_rw_tris(); 
00BE:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00BF:  BCF    03.5
00C0:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00E2:  MOVF   78,W
00E3:  MOVWF  45
00E4:  BTFSC  45.7
00E5:  GOTO   0C1
....................    lcd_output_rs(address); 
00E6:  BTFSS  43.0
00E7:  BCF    06.1
00E8:  BTFSC  43.0
00E9:  BSF    06.1
....................    delay_cycles(1); 
00EA:  NOP
....................    lcd_output_rw(0); 
00EB:  BCF    06.2
....................    delay_cycles(1); 
00EC:  NOP
....................    lcd_output_enable(0); 
00ED:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00EE:  SWAPF  44,W
00EF:  MOVWF  45
00F0:  MOVLW  0F
00F1:  ANDWF  45,F
00F2:  MOVF   45,W
00F3:  MOVWF  46
00F4:  CALL   0A9
....................    lcd_send_nibble(n & 0xf); 
00F5:  MOVF   44,W
00F6:  ANDLW  0F
00F7:  MOVWF  45
00F8:  MOVWF  46
00F9:  CALL   0A9
00FA:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00FB:  MOVLW  0F
00FC:  BSF    03.5
00FD:  ANDWF  06,W
00FE:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00FF:  BCF    06.0
....................    lcd_rs_tris(); 
0100:  BCF    06.1
....................    lcd_rw_tris(); 
0101:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0102:  BCF    03.5
0103:  BCF    06.1
....................    lcd_output_rw(0); 
0104:  BCF    06.2
....................    lcd_output_enable(0); 
0105:  BCF    06.0
....................      
....................    delay_ms(15); 
0106:  MOVLW  0F
0107:  MOVWF  3F
0108:  CALL   094
....................    for(i=1;i<=3;++i) 
0109:  MOVLW  01
010A:  MOVWF  31
010B:  MOVF   31,W
010C:  SUBLW  03
010D:  BTFSS  03.0
010E:  GOTO   117
....................    { 
....................        lcd_send_nibble(3); 
010F:  MOVLW  03
0110:  MOVWF  46
0111:  CALL   0A9
....................        delay_ms(5); 
0112:  MOVLW  05
0113:  MOVWF  3F
0114:  CALL   094
0115:  INCF   31,F
0116:  GOTO   10B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0117:  MOVLW  02
0118:  MOVWF  46
0119:  CALL   0A9
....................    delay_ms(5); 
011A:  MOVLW  05
011B:  MOVWF  3F
011C:  CALL   094
....................    for(i=0;i<=3;++i) 
011D:  CLRF   31
011E:  MOVF   31,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12B
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0122:  MOVF   31,W
0123:  CALL   031
0124:  MOVWF  32
0125:  CLRF   43
0126:  MOVF   32,W
0127:  MOVWF  44
0128:  CALL   0BB
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0129:  INCF   31,F
012A:  GOTO   11E
012B:  BCF    0A.3
012C:  BCF    0A.4
012D:  GOTO   44F (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
012E:  DECFSZ 40,W
012F:  GOTO   131
0130:  GOTO   134
....................       address=LCD_LINE_TWO; 
0131:  MOVLW  40
0132:  MOVWF  41
0133:  GOTO   135
....................    else 
....................       address=0; 
0134:  CLRF   41
....................       
....................    address+=x-1; 
0135:  MOVLW  01
0136:  SUBWF  3F,W
0137:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address); 
0138:  MOVF   41,W
0139:  IORLW  80
013A:  MOVWF  42
013B:  CLRF   43
013C:  MOVF   42,W
013D:  MOVWF  44
013E:  CALL   0BB
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013F:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0140:  MOVF   3E,W
0141:  XORLW  07
0142:  BTFSC  03.2
0143:  GOTO   14E
0144:  XORLW  0B
0145:  BTFSC  03.2
0146:  GOTO   153
0147:  XORLW  06
0148:  BTFSC  03.2
0149:  GOTO   15B
014A:  XORLW  02
014B:  BTFSC  03.2
014C:  GOTO   161
014D:  GOTO   166
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
014E:  MOVLW  01
014F:  MOVWF  3F
0150:  MOVWF  40
0151:  CALL   12E
0152:  GOTO   16B
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0153:  CLRF   43
0154:  MOVLW  01
0155:  MOVWF  44
0156:  CALL   0BB
....................                      delay_ms(2); 
0157:  MOVLW  02
0158:  MOVWF  3F
0159:  CALL   094
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
015A:  GOTO   16B
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
015B:  MOVLW  01
015C:  MOVWF  3F
015D:  MOVLW  02
015E:  MOVWF  40
015F:  CALL   12E
0160:  GOTO   16B
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0161:  CLRF   43
0162:  MOVLW  10
0163:  MOVWF  44
0164:  CALL   0BB
0165:  GOTO   16B
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0166:  MOVLW  01
0167:  MOVWF  43
0168:  MOVF   3E,W
0169:  MOVWF  44
016A:  CALL   0BB
....................      #endif 
....................    } 
016B:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #priority timer2,timer1 
....................  
.................... unsigned long int bilgi; 
.................... float sicaklik; 
....................  
.................... int8 red_duty; 
.................... int8 green_duty; 
.................... int8 blue_duty; 
.................... int sayici; 
....................  
.................... void adc() 
.................... { 
....................       bilgi=read_adc();  
*
022C:  BSF    1F.2
022D:  BTFSC  1F.2
022E:  GOTO   22D
022F:  BSF    03.5
0230:  MOVF   1E,W
0231:  BCF    03.5
0232:  MOVWF  27
0233:  MOVF   1E,W
0234:  MOVWF  28
....................       sicaklik=(0.0048828125*bilgi)*100; //sýcaklýk hesaplama 
0235:  MOVF   28,W
0236:  MOVWF  32
0237:  MOVF   27,W
0238:  MOVWF  31
*
0255:  CLRF   41
0256:  CLRF   40
0257:  MOVLW  20
0258:  MOVWF  3F
0259:  MOVLW  77
025A:  MOVWF  3E
025B:  MOVF   7A,W
025C:  MOVWF  45
025D:  MOVF   79,W
025E:  MOVWF  44
025F:  MOVF   78,W
0260:  MOVWF  43
0261:  MOVF   77,W
0262:  MOVWF  42
0263:  CALL   1B7
0264:  MOVF   7A,W
0265:  MOVWF  34
0266:  MOVF   79,W
0267:  MOVWF  33
0268:  MOVF   78,W
0269:  MOVWF  32
026A:  MOVF   77,W
026B:  MOVWF  31
026C:  MOVF   7A,W
026D:  MOVWF  41
026E:  MOVF   79,W
026F:  MOVWF  40
0270:  MOVF   78,W
0271:  MOVWF  3F
0272:  MOVF   77,W
0273:  MOVWF  3E
0274:  CLRF   45
0275:  CLRF   44
0276:  MOVLW  48
0277:  MOVWF  43
0278:  MOVLW  85
0279:  MOVWF  42
027A:  CALL   1B7
027B:  MOVF   7A,W
027C:  MOVWF  2C
027D:  MOVF   79,W
027E:  MOVWF  2B
027F:  MOVF   78,W
0280:  MOVWF  2A
0281:  MOVF   77,W
0282:  MOVWF  29
0283:  BCF    0A.3
0284:  BCF    0A.4
0285:  GOTO   462 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void lcd() 
.................... { 
....................       lcd_gotoxy(10,1); 
*
03B7:  MOVLW  0A
03B8:  MOVWF  3F
03B9:  MOVLW  01
03BA:  MOVWF  40
03BB:  CALL   12E
....................       printf(lcd_putc,"%3.0f'C",sicaklik); 
03BC:  MOVLW  02
03BD:  MOVWF  04
03BE:  MOVF   2C,W
03BF:  MOVWF  34
03C0:  MOVF   2B,W
03C1:  MOVWF  33
03C2:  MOVF   2A,W
03C3:  MOVWF  32
03C4:  MOVF   29,W
03C5:  MOVWF  31
03C6:  CLRF   35
03C7:  GOTO   2D5
03C8:  MOVLW  27
03C9:  MOVWF  3E
03CA:  CALL   140
03CB:  MOVLW  43
03CC:  MOVWF  3E
03CD:  CALL   140
....................       delay_ms(20); 
03CE:  MOVLW  14
03CF:  MOVWF  3F
03D0:  CALL   094
....................       lcd_gotoxy(1,2); 
03D1:  MOVLW  01
03D2:  MOVWF  3F
03D3:  MOVLW  02
03D4:  MOVWF  40
03D5:  CALL   12E
....................       printf(lcd_putc,"\nSERKN-ARIF-YUSUF"); 
03D6:  MOVLW  39
03D7:  BSF    03.6
03D8:  MOVWF  0D
03D9:  MOVLW  00
03DA:  MOVWF  0F
03DB:  BCF    03.6
03DC:  CALL   16C
03DD:  BCF    0A.3
03DE:  BCF    0A.4
03DF:  GOTO   463 (RETURN)
.................... } 
....................  
....................  
.................... #INT_TIMER1 
.................... void timer() 
.................... { 
....................     set_timer1(preload); 
*
0042:  CLRF   0E
0043:  MOVLW  FF
0044:  MOVWF  0F
0045:  MOVLW  B2
0046:  MOVWF  0E
....................     
....................    if (sayici < 255) 
0047:  INCFSZ 30,W
0048:  GOTO   04A
0049:  GOTO   063
....................     { 
....................       if (sayici == red_duty)   output_low(red); 
004A:  MOVF   2D,W
004B:  SUBWF  30,W
004C:  BTFSS  03.2
004D:  GOTO   052
004E:  BSF    03.5
004F:  BCF    09.0
0050:  BCF    03.5
0051:  BCF    09.0
....................       
....................       if (sayici == green_duty) output_low(green); 
0052:  MOVF   2E,W
0053:  SUBWF  30,W
0054:  BTFSS  03.2
0055:  GOTO   05A
0056:  BSF    03.5
0057:  BCF    09.1
0058:  BCF    03.5
0059:  BCF    09.1
....................  
....................       if (sayici == blue_duty)  output_low(blue); 
005A:  MOVF   2F,W
005B:  SUBWF  30,W
005C:  BTFSS  03.2
005D:  GOTO   062
005E:  BSF    03.5
005F:  BCF    09.2
0060:  BCF    03.5
0061:  BCF    09.2
....................  
....................     } 
0062:  GOTO   08A
....................    
....................    else if(sayici == 255) 
0063:  INCFSZ 30,W
0064:  GOTO   08A
....................     { 
....................       sayici = 0; 
0065:  CLRF   30
....................       if (red_duty==0) output_low(red); 
0066:  MOVF   2D,F
0067:  BTFSS  03.2
0068:  GOTO   06E
0069:  BSF    03.5
006A:  BCF    09.0
006B:  BCF    03.5
006C:  BCF    09.0
006D:  GOTO   072
....................       else output_high(red); 
006E:  BSF    03.5
006F:  BCF    09.0
0070:  BCF    03.5
0071:  BSF    09.0
....................       if (green_duty==0) output_low(green); 
0072:  MOVF   2E,F
0073:  BTFSS  03.2
0074:  GOTO   07A
0075:  BSF    03.5
0076:  BCF    09.1
0077:  BCF    03.5
0078:  BCF    09.1
0079:  GOTO   07E
....................       else output_high(green); 
007A:  BSF    03.5
007B:  BCF    09.1
007C:  BCF    03.5
007D:  BSF    09.1
....................       if (blue_duty==0) output_low(blue); 
007E:  MOVF   2F,F
007F:  BTFSS  03.2
0080:  GOTO   086
0081:  BSF    03.5
0082:  BCF    09.2
0083:  BCF    03.5
0084:  BCF    09.2
0085:  GOTO   08A
....................       else output_high(blue); 
0086:  BSF    03.5
0087:  BCF    09.2
0088:  BCF    03.5
0089:  BSF    09.2
....................     } 
....................    sayici++; 
008A:  INCF   30,F
008B:  BCF    0C.0
008C:  BCF    0A.3
008D:  BCF    0A.4
008E:  GOTO   01D
.................... } 
....................  
.................... void rgb () 
.................... { 
....................    if(sicaklik<0){red_duty=255; green_duty=255;   blue_duty=255;} //beyaz 
*
0800:  MOVF   2C,W
0801:  MOVWF  34
0802:  MOVF   2B,W
0803:  MOVWF  33
0804:  MOVF   2A,W
0805:  MOVWF  32
0806:  MOVF   29,W
0807:  MOVWF  31
0808:  CLRF   38
0809:  CLRF   37
080A:  CLRF   36
080B:  CLRF   35
080C:  BCF    0A.3
080D:  CALL   3E0
080E:  BSF    0A.3
080F:  BTFSS  03.0
0810:  GOTO   015
0811:  MOVLW  FF
0812:  MOVWF  2D
0813:  MOVWF  2E
0814:  MOVWF  2F
....................     
....................    if(sicaklik>=0 && sicaklik<2){red_duty=0;   green_duty=255; blue_duty=51;} 
0815:  CLRF   34
0816:  CLRF   33
0817:  CLRF   32
0818:  CLRF   31
0819:  MOVF   2C,W
081A:  MOVWF  38
081B:  MOVF   2B,W
081C:  MOVWF  37
081D:  MOVF   2A,W
081E:  MOVWF  36
081F:  MOVF   29,W
0820:  MOVWF  35
0821:  BCF    0A.3
0822:  CALL   3E0
0823:  BSF    0A.3
0824:  BTFSC  03.0
0825:  GOTO   028
0826:  BTFSS  03.2
0827:  GOTO   03F
0828:  MOVF   2C,W
0829:  MOVWF  34
082A:  MOVF   2B,W
082B:  MOVWF  33
082C:  MOVF   2A,W
082D:  MOVWF  32
082E:  MOVF   29,W
082F:  MOVWF  31
0830:  CLRF   38
0831:  CLRF   37
0832:  CLRF   36
0833:  MOVLW  80
0834:  MOVWF  35
0835:  BCF    0A.3
0836:  CALL   3E0
0837:  BSF    0A.3
0838:  BTFSS  03.0
0839:  GOTO   03F
083A:  CLRF   2D
083B:  MOVLW  FF
083C:  MOVWF  2E
083D:  MOVLW  33
083E:  MOVWF  2F
....................    if(sicaklik>=2 && sicaklik<4){red_duty=0;   green_duty=255; blue_duty=102;} 
083F:  CLRF   34
0840:  CLRF   33
0841:  CLRF   32
0842:  MOVLW  80
0843:  MOVWF  31
0844:  MOVF   2C,W
0845:  MOVWF  38
0846:  MOVF   2B,W
0847:  MOVWF  37
0848:  MOVF   2A,W
0849:  MOVWF  36
084A:  MOVF   29,W
084B:  MOVWF  35
084C:  BCF    0A.3
084D:  CALL   3E0
084E:  BSF    0A.3
084F:  BTFSC  03.0
0850:  GOTO   053
0851:  BTFSS  03.2
0852:  GOTO   06A
0853:  MOVF   2C,W
0854:  MOVWF  34
0855:  MOVF   2B,W
0856:  MOVWF  33
0857:  MOVF   2A,W
0858:  MOVWF  32
0859:  MOVF   29,W
085A:  MOVWF  31
085B:  CLRF   38
085C:  CLRF   37
085D:  CLRF   36
085E:  MOVLW  81
085F:  MOVWF  35
0860:  BCF    0A.3
0861:  CALL   3E0
0862:  BSF    0A.3
0863:  BTFSS  03.0
0864:  GOTO   06A
0865:  CLRF   2D
0866:  MOVLW  FF
0867:  MOVWF  2E
0868:  MOVLW  66
0869:  MOVWF  2F
....................     if(sicaklik>=4 && sicaklik<6){red_duty=0;   green_duty=255; blue_duty=153;} 
086A:  CLRF   34
086B:  CLRF   33
086C:  CLRF   32
086D:  MOVLW  81
086E:  MOVWF  31
086F:  MOVF   2C,W
0870:  MOVWF  38
0871:  MOVF   2B,W
0872:  MOVWF  37
0873:  MOVF   2A,W
0874:  MOVWF  36
0875:  MOVF   29,W
0876:  MOVWF  35
0877:  BCF    0A.3
0878:  CALL   3E0
0879:  BSF    0A.3
087A:  BTFSC  03.0
087B:  GOTO   07E
087C:  BTFSS  03.2
087D:  GOTO   096
087E:  MOVF   2C,W
087F:  MOVWF  34
0880:  MOVF   2B,W
0881:  MOVWF  33
0882:  MOVF   2A,W
0883:  MOVWF  32
0884:  MOVF   29,W
0885:  MOVWF  31
0886:  CLRF   38
0887:  CLRF   37
0888:  MOVLW  40
0889:  MOVWF  36
088A:  MOVLW  81
088B:  MOVWF  35
088C:  BCF    0A.3
088D:  CALL   3E0
088E:  BSF    0A.3
088F:  BTFSS  03.0
0890:  GOTO   096
0891:  CLRF   2D
0892:  MOVLW  FF
0893:  MOVWF  2E
0894:  MOVLW  99
0895:  MOVWF  2F
....................    if(sicaklik>=6 && sicaklik<8){red_duty=0;   green_duty=255; blue_duty=204;} 
0896:  CLRF   34
0897:  CLRF   33
0898:  MOVLW  40
0899:  MOVWF  32
089A:  MOVLW  81
089B:  MOVWF  31
089C:  MOVF   2C,W
089D:  MOVWF  38
089E:  MOVF   2B,W
089F:  MOVWF  37
08A0:  MOVF   2A,W
08A1:  MOVWF  36
08A2:  MOVF   29,W
08A3:  MOVWF  35
08A4:  BCF    0A.3
08A5:  CALL   3E0
08A6:  BSF    0A.3
08A7:  BTFSC  03.0
08A8:  GOTO   0AB
08A9:  BTFSS  03.2
08AA:  GOTO   0C2
08AB:  MOVF   2C,W
08AC:  MOVWF  34
08AD:  MOVF   2B,W
08AE:  MOVWF  33
08AF:  MOVF   2A,W
08B0:  MOVWF  32
08B1:  MOVF   29,W
08B2:  MOVWF  31
08B3:  CLRF   38
08B4:  CLRF   37
08B5:  CLRF   36
08B6:  MOVLW  82
08B7:  MOVWF  35
08B8:  BCF    0A.3
08B9:  CALL   3E0
08BA:  BSF    0A.3
08BB:  BTFSS  03.0
08BC:  GOTO   0C2
08BD:  CLRF   2D
08BE:  MOVLW  FF
08BF:  MOVWF  2E
08C0:  MOVLW  CC
08C1:  MOVWF  2F
....................    if(sicaklik>=8 && sicaklik<10){red_duty=0;   green_duty=255; blue_duty=255;} // turkuaz 
08C2:  CLRF   34
08C3:  CLRF   33
08C4:  CLRF   32
08C5:  MOVLW  82
08C6:  MOVWF  31
08C7:  MOVF   2C,W
08C8:  MOVWF  38
08C9:  MOVF   2B,W
08CA:  MOVWF  37
08CB:  MOVF   2A,W
08CC:  MOVWF  36
08CD:  MOVF   29,W
08CE:  MOVWF  35
08CF:  BCF    0A.3
08D0:  CALL   3E0
08D1:  BSF    0A.3
08D2:  BTFSC  03.0
08D3:  GOTO   0D6
08D4:  BTFSS  03.2
08D5:  GOTO   0ED
08D6:  MOVF   2C,W
08D7:  MOVWF  34
08D8:  MOVF   2B,W
08D9:  MOVWF  33
08DA:  MOVF   2A,W
08DB:  MOVWF  32
08DC:  MOVF   29,W
08DD:  MOVWF  31
08DE:  CLRF   38
08DF:  CLRF   37
08E0:  MOVLW  20
08E1:  MOVWF  36
08E2:  MOVLW  82
08E3:  MOVWF  35
08E4:  BCF    0A.3
08E5:  CALL   3E0
08E6:  BSF    0A.3
08E7:  BTFSS  03.0
08E8:  GOTO   0ED
08E9:  CLRF   2D
08EA:  MOVLW  FF
08EB:  MOVWF  2E
08EC:  MOVWF  2F
....................    if(sicaklik>=10 && sicaklik<12){red_duty=0;   green_duty=204; blue_duty=255;}    
08ED:  CLRF   34
08EE:  CLRF   33
08EF:  MOVLW  20
08F0:  MOVWF  32
08F1:  MOVLW  82
08F2:  MOVWF  31
08F3:  MOVF   2C,W
08F4:  MOVWF  38
08F5:  MOVF   2B,W
08F6:  MOVWF  37
08F7:  MOVF   2A,W
08F8:  MOVWF  36
08F9:  MOVF   29,W
08FA:  MOVWF  35
08FB:  BCF    0A.3
08FC:  CALL   3E0
08FD:  BSF    0A.3
08FE:  BTFSC  03.0
08FF:  GOTO   102
0900:  BTFSS  03.2
0901:  GOTO   11A
0902:  MOVF   2C,W
0903:  MOVWF  34
0904:  MOVF   2B,W
0905:  MOVWF  33
0906:  MOVF   2A,W
0907:  MOVWF  32
0908:  MOVF   29,W
0909:  MOVWF  31
090A:  CLRF   38
090B:  CLRF   37
090C:  MOVLW  40
090D:  MOVWF  36
090E:  MOVLW  82
090F:  MOVWF  35
0910:  BCF    0A.3
0911:  CALL   3E0
0912:  BSF    0A.3
0913:  BTFSS  03.0
0914:  GOTO   11A
0915:  CLRF   2D
0916:  MOVLW  CC
0917:  MOVWF  2E
0918:  MOVLW  FF
0919:  MOVWF  2F
....................    if(sicaklik>=12 && sicaklik<14){red_duty=0;   green_duty=153; blue_duty=255;} 
091A:  CLRF   34
091B:  CLRF   33
091C:  MOVLW  40
091D:  MOVWF  32
091E:  MOVLW  82
091F:  MOVWF  31
0920:  MOVF   2C,W
0921:  MOVWF  38
0922:  MOVF   2B,W
0923:  MOVWF  37
0924:  MOVF   2A,W
0925:  MOVWF  36
0926:  MOVF   29,W
0927:  MOVWF  35
0928:  BCF    0A.3
0929:  CALL   3E0
092A:  BSF    0A.3
092B:  BTFSC  03.0
092C:  GOTO   12F
092D:  BTFSS  03.2
092E:  GOTO   147
092F:  MOVF   2C,W
0930:  MOVWF  34
0931:  MOVF   2B,W
0932:  MOVWF  33
0933:  MOVF   2A,W
0934:  MOVWF  32
0935:  MOVF   29,W
0936:  MOVWF  31
0937:  CLRF   38
0938:  CLRF   37
0939:  MOVLW  60
093A:  MOVWF  36
093B:  MOVLW  82
093C:  MOVWF  35
093D:  BCF    0A.3
093E:  CALL   3E0
093F:  BSF    0A.3
0940:  BTFSS  03.0
0941:  GOTO   147
0942:  CLRF   2D
0943:  MOVLW  99
0944:  MOVWF  2E
0945:  MOVLW  FF
0946:  MOVWF  2F
....................    if(sicaklik>=14 && sicaklik<16){red_duty=0;   green_duty=102; blue_duty=255;}  
0947:  CLRF   34
0948:  CLRF   33
0949:  MOVLW  60
094A:  MOVWF  32
094B:  MOVLW  82
094C:  MOVWF  31
094D:  MOVF   2C,W
094E:  MOVWF  38
094F:  MOVF   2B,W
0950:  MOVWF  37
0951:  MOVF   2A,W
0952:  MOVWF  36
0953:  MOVF   29,W
0954:  MOVWF  35
0955:  BCF    0A.3
0956:  CALL   3E0
0957:  BSF    0A.3
0958:  BTFSC  03.0
0959:  GOTO   15C
095A:  BTFSS  03.2
095B:  GOTO   173
095C:  MOVF   2C,W
095D:  MOVWF  34
095E:  MOVF   2B,W
095F:  MOVWF  33
0960:  MOVF   2A,W
0961:  MOVWF  32
0962:  MOVF   29,W
0963:  MOVWF  31
0964:  CLRF   38
0965:  CLRF   37
0966:  CLRF   36
0967:  MOVLW  83
0968:  MOVWF  35
0969:  BCF    0A.3
096A:  CALL   3E0
096B:  BSF    0A.3
096C:  BTFSS  03.0
096D:  GOTO   173
096E:  CLRF   2D
096F:  MOVLW  66
0970:  MOVWF  2E
0971:  MOVLW  FF
0972:  MOVWF  2F
....................    if(sicaklik>=16 && sicaklik<18){red_duty=0;   green_duty=51;  blue_duty=255;} 
0973:  CLRF   34
0974:  CLRF   33
0975:  CLRF   32
0976:  MOVLW  83
0977:  MOVWF  31
0978:  MOVF   2C,W
0979:  MOVWF  38
097A:  MOVF   2B,W
097B:  MOVWF  37
097C:  MOVF   2A,W
097D:  MOVWF  36
097E:  MOVF   29,W
097F:  MOVWF  35
0980:  BCF    0A.3
0981:  CALL   3E0
0982:  BSF    0A.3
0983:  BTFSC  03.0
0984:  GOTO   187
0985:  BTFSS  03.2
0986:  GOTO   19F
0987:  MOVF   2C,W
0988:  MOVWF  34
0989:  MOVF   2B,W
098A:  MOVWF  33
098B:  MOVF   2A,W
098C:  MOVWF  32
098D:  MOVF   29,W
098E:  MOVWF  31
098F:  CLRF   38
0990:  CLRF   37
0991:  MOVLW  10
0992:  MOVWF  36
0993:  MOVLW  83
0994:  MOVWF  35
0995:  BCF    0A.3
0996:  CALL   3E0
0997:  BSF    0A.3
0998:  BTFSS  03.0
0999:  GOTO   19F
099A:  CLRF   2D
099B:  MOVLW  33
099C:  MOVWF  2E
099D:  MOVLW  FF
099E:  MOVWF  2F
....................    if(sicaklik>=18 && sicaklik<20){red_duty=0;   green_duty=0;   blue_duty=255;} // mavi 
099F:  CLRF   34
09A0:  CLRF   33
09A1:  MOVLW  10
09A2:  MOVWF  32
09A3:  MOVLW  83
09A4:  MOVWF  31
09A5:  MOVF   2C,W
09A6:  MOVWF  38
09A7:  MOVF   2B,W
09A8:  MOVWF  37
09A9:  MOVF   2A,W
09AA:  MOVWF  36
09AB:  MOVF   29,W
09AC:  MOVWF  35
09AD:  BCF    0A.3
09AE:  CALL   3E0
09AF:  BSF    0A.3
09B0:  BTFSC  03.0
09B1:  GOTO   1B4
09B2:  BTFSS  03.2
09B3:  GOTO   1CB
09B4:  MOVF   2C,W
09B5:  MOVWF  34
09B6:  MOVF   2B,W
09B7:  MOVWF  33
09B8:  MOVF   2A,W
09B9:  MOVWF  32
09BA:  MOVF   29,W
09BB:  MOVWF  31
09BC:  CLRF   38
09BD:  CLRF   37
09BE:  MOVLW  20
09BF:  MOVWF  36
09C0:  MOVLW  83
09C1:  MOVWF  35
09C2:  BCF    0A.3
09C3:  CALL   3E0
09C4:  BSF    0A.3
09C5:  BTFSS  03.0
09C6:  GOTO   1CB
09C7:  CLRF   2D
09C8:  CLRF   2E
09C9:  MOVLW  FF
09CA:  MOVWF  2F
....................    if(sicaklik>=20 && sicaklik<22){red_duty=51;  green_duty=0;   blue_duty=255;} 
09CB:  CLRF   34
09CC:  CLRF   33
09CD:  MOVLW  20
09CE:  MOVWF  32
09CF:  MOVLW  83
09D0:  MOVWF  31
09D1:  MOVF   2C,W
09D2:  MOVWF  38
09D3:  MOVF   2B,W
09D4:  MOVWF  37
09D5:  MOVF   2A,W
09D6:  MOVWF  36
09D7:  MOVF   29,W
09D8:  MOVWF  35
09D9:  BCF    0A.3
09DA:  CALL   3E0
09DB:  BSF    0A.3
09DC:  BTFSC  03.0
09DD:  GOTO   1E0
09DE:  BTFSS  03.2
09DF:  GOTO   1F8
09E0:  MOVF   2C,W
09E1:  MOVWF  34
09E2:  MOVF   2B,W
09E3:  MOVWF  33
09E4:  MOVF   2A,W
09E5:  MOVWF  32
09E6:  MOVF   29,W
09E7:  MOVWF  31
09E8:  CLRF   38
09E9:  CLRF   37
09EA:  MOVLW  30
09EB:  MOVWF  36
09EC:  MOVLW  83
09ED:  MOVWF  35
09EE:  BCF    0A.3
09EF:  CALL   3E0
09F0:  BSF    0A.3
09F1:  BTFSS  03.0
09F2:  GOTO   1F8
09F3:  MOVLW  33
09F4:  MOVWF  2D
09F5:  CLRF   2E
09F6:  MOVLW  FF
09F7:  MOVWF  2F
....................    if(sicaklik>=22 && sicaklik<24){red_duty=102; green_duty=0;   blue_duty=255;} 
09F8:  CLRF   34
09F9:  CLRF   33
09FA:  MOVLW  30
09FB:  MOVWF  32
09FC:  MOVLW  83
09FD:  MOVWF  31
09FE:  MOVF   2C,W
09FF:  MOVWF  38
0A00:  MOVF   2B,W
0A01:  MOVWF  37
0A02:  MOVF   2A,W
0A03:  MOVWF  36
0A04:  MOVF   29,W
0A05:  MOVWF  35
0A06:  BCF    0A.3
0A07:  CALL   3E0
0A08:  BSF    0A.3
0A09:  BTFSC  03.0
0A0A:  GOTO   20D
0A0B:  BTFSS  03.2
0A0C:  GOTO   225
0A0D:  MOVF   2C,W
0A0E:  MOVWF  34
0A0F:  MOVF   2B,W
0A10:  MOVWF  33
0A11:  MOVF   2A,W
0A12:  MOVWF  32
0A13:  MOVF   29,W
0A14:  MOVWF  31
0A15:  CLRF   38
0A16:  CLRF   37
0A17:  MOVLW  40
0A18:  MOVWF  36
0A19:  MOVLW  83
0A1A:  MOVWF  35
0A1B:  BCF    0A.3
0A1C:  CALL   3E0
0A1D:  BSF    0A.3
0A1E:  BTFSS  03.0
0A1F:  GOTO   225
0A20:  MOVLW  66
0A21:  MOVWF  2D
0A22:  CLRF   2E
0A23:  MOVLW  FF
0A24:  MOVWF  2F
....................    if(sicaklik>=24 && sicaklik<26){red_duty=153; green_duty=0;   blue_duty=255;}    
0A25:  CLRF   34
0A26:  CLRF   33
0A27:  MOVLW  40
0A28:  MOVWF  32
0A29:  MOVLW  83
0A2A:  MOVWF  31
0A2B:  MOVF   2C,W
0A2C:  MOVWF  38
0A2D:  MOVF   2B,W
0A2E:  MOVWF  37
0A2F:  MOVF   2A,W
0A30:  MOVWF  36
0A31:  MOVF   29,W
0A32:  MOVWF  35
0A33:  BCF    0A.3
0A34:  CALL   3E0
0A35:  BSF    0A.3
0A36:  BTFSC  03.0
0A37:  GOTO   23A
0A38:  BTFSS  03.2
0A39:  GOTO   252
0A3A:  MOVF   2C,W
0A3B:  MOVWF  34
0A3C:  MOVF   2B,W
0A3D:  MOVWF  33
0A3E:  MOVF   2A,W
0A3F:  MOVWF  32
0A40:  MOVF   29,W
0A41:  MOVWF  31
0A42:  CLRF   38
0A43:  CLRF   37
0A44:  MOVLW  50
0A45:  MOVWF  36
0A46:  MOVLW  83
0A47:  MOVWF  35
0A48:  BCF    0A.3
0A49:  CALL   3E0
0A4A:  BSF    0A.3
0A4B:  BTFSS  03.0
0A4C:  GOTO   252
0A4D:  MOVLW  99
0A4E:  MOVWF  2D
0A4F:  CLRF   2E
0A50:  MOVLW  FF
0A51:  MOVWF  2F
....................    if(sicaklik>=26 && sicaklik<28){red_duty=204; green_duty=0;   blue_duty=255;} 
0A52:  CLRF   34
0A53:  CLRF   33
0A54:  MOVLW  50
0A55:  MOVWF  32
0A56:  MOVLW  83
0A57:  MOVWF  31
0A58:  MOVF   2C,W
0A59:  MOVWF  38
0A5A:  MOVF   2B,W
0A5B:  MOVWF  37
0A5C:  MOVF   2A,W
0A5D:  MOVWF  36
0A5E:  MOVF   29,W
0A5F:  MOVWF  35
0A60:  BCF    0A.3
0A61:  CALL   3E0
0A62:  BSF    0A.3
0A63:  BTFSC  03.0
0A64:  GOTO   267
0A65:  BTFSS  03.2
0A66:  GOTO   27F
0A67:  MOVF   2C,W
0A68:  MOVWF  34
0A69:  MOVF   2B,W
0A6A:  MOVWF  33
0A6B:  MOVF   2A,W
0A6C:  MOVWF  32
0A6D:  MOVF   29,W
0A6E:  MOVWF  31
0A6F:  CLRF   38
0A70:  CLRF   37
0A71:  MOVLW  60
0A72:  MOVWF  36
0A73:  MOVLW  83
0A74:  MOVWF  35
0A75:  BCF    0A.3
0A76:  CALL   3E0
0A77:  BSF    0A.3
0A78:  BTFSS  03.0
0A79:  GOTO   27F
0A7A:  MOVLW  CC
0A7B:  MOVWF  2D
0A7C:  CLRF   2E
0A7D:  MOVLW  FF
0A7E:  MOVWF  2F
....................    if(sicaklik>=28 && sicaklik<30){red_duty=255; green_duty=0;   blue_duty=255;} // pembe 
0A7F:  CLRF   34
0A80:  CLRF   33
0A81:  MOVLW  60
0A82:  MOVWF  32
0A83:  MOVLW  83
0A84:  MOVWF  31
0A85:  MOVF   2C,W
0A86:  MOVWF  38
0A87:  MOVF   2B,W
0A88:  MOVWF  37
0A89:  MOVF   2A,W
0A8A:  MOVWF  36
0A8B:  MOVF   29,W
0A8C:  MOVWF  35
0A8D:  BCF    0A.3
0A8E:  CALL   3E0
0A8F:  BSF    0A.3
0A90:  BTFSC  03.0
0A91:  GOTO   294
0A92:  BTFSS  03.2
0A93:  GOTO   2AB
0A94:  MOVF   2C,W
0A95:  MOVWF  34
0A96:  MOVF   2B,W
0A97:  MOVWF  33
0A98:  MOVF   2A,W
0A99:  MOVWF  32
0A9A:  MOVF   29,W
0A9B:  MOVWF  31
0A9C:  CLRF   38
0A9D:  CLRF   37
0A9E:  MOVLW  70
0A9F:  MOVWF  36
0AA0:  MOVLW  83
0AA1:  MOVWF  35
0AA2:  BCF    0A.3
0AA3:  CALL   3E0
0AA4:  BSF    0A.3
0AA5:  BTFSS  03.0
0AA6:  GOTO   2AB
0AA7:  MOVLW  FF
0AA8:  MOVWF  2D
0AA9:  CLRF   2E
0AAA:  MOVWF  2F
....................  
....................    if(sicaklik>=30 && sicaklik<32){red_duty=255; green_duty=51;  blue_duty=0;} 
0AAB:  CLRF   34
0AAC:  CLRF   33
0AAD:  MOVLW  70
0AAE:  MOVWF  32
0AAF:  MOVLW  83
0AB0:  MOVWF  31
0AB1:  MOVF   2C,W
0AB2:  MOVWF  38
0AB3:  MOVF   2B,W
0AB4:  MOVWF  37
0AB5:  MOVF   2A,W
0AB6:  MOVWF  36
0AB7:  MOVF   29,W
0AB8:  MOVWF  35
0AB9:  BCF    0A.3
0ABA:  CALL   3E0
0ABB:  BSF    0A.3
0ABC:  BTFSC  03.0
0ABD:  GOTO   2C0
0ABE:  BTFSS  03.2
0ABF:  GOTO   2D7
0AC0:  MOVF   2C,W
0AC1:  MOVWF  34
0AC2:  MOVF   2B,W
0AC3:  MOVWF  33
0AC4:  MOVF   2A,W
0AC5:  MOVWF  32
0AC6:  MOVF   29,W
0AC7:  MOVWF  31
0AC8:  CLRF   38
0AC9:  CLRF   37
0ACA:  CLRF   36
0ACB:  MOVLW  84
0ACC:  MOVWF  35
0ACD:  BCF    0A.3
0ACE:  CALL   3E0
0ACF:  BSF    0A.3
0AD0:  BTFSS  03.0
0AD1:  GOTO   2D7
0AD2:  MOVLW  FF
0AD3:  MOVWF  2D
0AD4:  MOVLW  33
0AD5:  MOVWF  2E
0AD6:  CLRF   2F
....................    if(sicaklik>=32 && sicaklik<34){red_duty=255; green_duty=102; blue_duty=0;} 
0AD7:  CLRF   34
0AD8:  CLRF   33
0AD9:  CLRF   32
0ADA:  MOVLW  84
0ADB:  MOVWF  31
0ADC:  MOVF   2C,W
0ADD:  MOVWF  38
0ADE:  MOVF   2B,W
0ADF:  MOVWF  37
0AE0:  MOVF   2A,W
0AE1:  MOVWF  36
0AE2:  MOVF   29,W
0AE3:  MOVWF  35
0AE4:  BCF    0A.3
0AE5:  CALL   3E0
0AE6:  BSF    0A.3
0AE7:  BTFSC  03.0
0AE8:  GOTO   2EB
0AE9:  BTFSS  03.2
0AEA:  GOTO   303
0AEB:  MOVF   2C,W
0AEC:  MOVWF  34
0AED:  MOVF   2B,W
0AEE:  MOVWF  33
0AEF:  MOVF   2A,W
0AF0:  MOVWF  32
0AF1:  MOVF   29,W
0AF2:  MOVWF  31
0AF3:  CLRF   38
0AF4:  CLRF   37
0AF5:  MOVLW  08
0AF6:  MOVWF  36
0AF7:  MOVLW  84
0AF8:  MOVWF  35
0AF9:  BCF    0A.3
0AFA:  CALL   3E0
0AFB:  BSF    0A.3
0AFC:  BTFSS  03.0
0AFD:  GOTO   303
0AFE:  MOVLW  FF
0AFF:  MOVWF  2D
0B00:  MOVLW  66
0B01:  MOVWF  2E
0B02:  CLRF   2F
....................    if(sicaklik>=34 && sicaklik<36){red_duty=255; green_duty=153; blue_duty=0;} 
0B03:  CLRF   34
0B04:  CLRF   33
0B05:  MOVLW  08
0B06:  MOVWF  32
0B07:  MOVLW  84
0B08:  MOVWF  31
0B09:  MOVF   2C,W
0B0A:  MOVWF  38
0B0B:  MOVF   2B,W
0B0C:  MOVWF  37
0B0D:  MOVF   2A,W
0B0E:  MOVWF  36
0B0F:  MOVF   29,W
0B10:  MOVWF  35
0B11:  BCF    0A.3
0B12:  CALL   3E0
0B13:  BSF    0A.3
0B14:  BTFSC  03.0
0B15:  GOTO   318
0B16:  BTFSS  03.2
0B17:  GOTO   330
0B18:  MOVF   2C,W
0B19:  MOVWF  34
0B1A:  MOVF   2B,W
0B1B:  MOVWF  33
0B1C:  MOVF   2A,W
0B1D:  MOVWF  32
0B1E:  MOVF   29,W
0B1F:  MOVWF  31
0B20:  CLRF   38
0B21:  CLRF   37
0B22:  MOVLW  10
0B23:  MOVWF  36
0B24:  MOVLW  84
0B25:  MOVWF  35
0B26:  BCF    0A.3
0B27:  CALL   3E0
0B28:  BSF    0A.3
0B29:  BTFSS  03.0
0B2A:  GOTO   330
0B2B:  MOVLW  FF
0B2C:  MOVWF  2D
0B2D:  MOVLW  99
0B2E:  MOVWF  2E
0B2F:  CLRF   2F
....................    if(sicaklik>=36 && sicaklik<38){red_duty=255; green_duty=204; blue_duty=0;} 
0B30:  CLRF   34
0B31:  CLRF   33
0B32:  MOVLW  10
0B33:  MOVWF  32
0B34:  MOVLW  84
0B35:  MOVWF  31
0B36:  MOVF   2C,W
0B37:  MOVWF  38
0B38:  MOVF   2B,W
0B39:  MOVWF  37
0B3A:  MOVF   2A,W
0B3B:  MOVWF  36
0B3C:  MOVF   29,W
0B3D:  MOVWF  35
0B3E:  BCF    0A.3
0B3F:  CALL   3E0
0B40:  BSF    0A.3
0B41:  BTFSC  03.0
0B42:  GOTO   345
0B43:  BTFSS  03.2
0B44:  GOTO   35D
0B45:  MOVF   2C,W
0B46:  MOVWF  34
0B47:  MOVF   2B,W
0B48:  MOVWF  33
0B49:  MOVF   2A,W
0B4A:  MOVWF  32
0B4B:  MOVF   29,W
0B4C:  MOVWF  31
0B4D:  CLRF   38
0B4E:  CLRF   37
0B4F:  MOVLW  18
0B50:  MOVWF  36
0B51:  MOVLW  84
0B52:  MOVWF  35
0B53:  BCF    0A.3
0B54:  CALL   3E0
0B55:  BSF    0A.3
0B56:  BTFSS  03.0
0B57:  GOTO   35D
0B58:  MOVLW  FF
0B59:  MOVWF  2D
0B5A:  MOVLW  CC
0B5B:  MOVWF  2E
0B5C:  CLRF   2F
....................    if(sicaklik>=38 && sicaklik<40){red_duty=255; green_duty=255; blue_duty=0;} // sari 
0B5D:  CLRF   34
0B5E:  CLRF   33
0B5F:  MOVLW  18
0B60:  MOVWF  32
0B61:  MOVLW  84
0B62:  MOVWF  31
0B63:  MOVF   2C,W
0B64:  MOVWF  38
0B65:  MOVF   2B,W
0B66:  MOVWF  37
0B67:  MOVF   2A,W
0B68:  MOVWF  36
0B69:  MOVF   29,W
0B6A:  MOVWF  35
0B6B:  BCF    0A.3
0B6C:  CALL   3E0
0B6D:  BSF    0A.3
0B6E:  BTFSC  03.0
0B6F:  GOTO   372
0B70:  BTFSS  03.2
0B71:  GOTO   389
0B72:  MOVF   2C,W
0B73:  MOVWF  34
0B74:  MOVF   2B,W
0B75:  MOVWF  33
0B76:  MOVF   2A,W
0B77:  MOVWF  32
0B78:  MOVF   29,W
0B79:  MOVWF  31
0B7A:  CLRF   38
0B7B:  CLRF   37
0B7C:  MOVLW  20
0B7D:  MOVWF  36
0B7E:  MOVLW  84
0B7F:  MOVWF  35
0B80:  BCF    0A.3
0B81:  CALL   3E0
0B82:  BSF    0A.3
0B83:  BTFSS  03.0
0B84:  GOTO   389
0B85:  MOVLW  FF
0B86:  MOVWF  2D
0B87:  MOVWF  2E
0B88:  CLRF   2F
....................  
....................     
....................    if(sicaklik>=40 && sicaklik<42){red_duty=51; green_duty=0;   blue_duty=0;} 
0B89:  CLRF   34
0B8A:  CLRF   33
0B8B:  MOVLW  20
0B8C:  MOVWF  32
0B8D:  MOVLW  84
0B8E:  MOVWF  31
0B8F:  MOVF   2C,W
0B90:  MOVWF  38
0B91:  MOVF   2B,W
0B92:  MOVWF  37
0B93:  MOVF   2A,W
0B94:  MOVWF  36
0B95:  MOVF   29,W
0B96:  MOVWF  35
0B97:  BCF    0A.3
0B98:  CALL   3E0
0B99:  BSF    0A.3
0B9A:  BTFSC  03.0
0B9B:  GOTO   39E
0B9C:  BTFSS  03.2
0B9D:  GOTO   3B5
0B9E:  MOVF   2C,W
0B9F:  MOVWF  34
0BA0:  MOVF   2B,W
0BA1:  MOVWF  33
0BA2:  MOVF   2A,W
0BA3:  MOVWF  32
0BA4:  MOVF   29,W
0BA5:  MOVWF  31
0BA6:  CLRF   38
0BA7:  CLRF   37
0BA8:  MOVLW  28
0BA9:  MOVWF  36
0BAA:  MOVLW  84
0BAB:  MOVWF  35
0BAC:  BCF    0A.3
0BAD:  CALL   3E0
0BAE:  BSF    0A.3
0BAF:  BTFSS  03.0
0BB0:  GOTO   3B5
0BB1:  MOVLW  33
0BB2:  MOVWF  2D
0BB3:  CLRF   2E
0BB4:  CLRF   2F
....................    if(sicaklik>=42 && sicaklik<44){red_duty=102; green_duty=0;   blue_duty=0;} 
0BB5:  CLRF   34
0BB6:  CLRF   33
0BB7:  MOVLW  28
0BB8:  MOVWF  32
0BB9:  MOVLW  84
0BBA:  MOVWF  31
0BBB:  MOVF   2C,W
0BBC:  MOVWF  38
0BBD:  MOVF   2B,W
0BBE:  MOVWF  37
0BBF:  MOVF   2A,W
0BC0:  MOVWF  36
0BC1:  MOVF   29,W
0BC2:  MOVWF  35
0BC3:  BCF    0A.3
0BC4:  CALL   3E0
0BC5:  BSF    0A.3
0BC6:  BTFSC  03.0
0BC7:  GOTO   3CA
0BC8:  BTFSS  03.2
0BC9:  GOTO   3E1
0BCA:  MOVF   2C,W
0BCB:  MOVWF  34
0BCC:  MOVF   2B,W
0BCD:  MOVWF  33
0BCE:  MOVF   2A,W
0BCF:  MOVWF  32
0BD0:  MOVF   29,W
0BD1:  MOVWF  31
0BD2:  CLRF   38
0BD3:  CLRF   37
0BD4:  MOVLW  30
0BD5:  MOVWF  36
0BD6:  MOVLW  84
0BD7:  MOVWF  35
0BD8:  BCF    0A.3
0BD9:  CALL   3E0
0BDA:  BSF    0A.3
0BDB:  BTFSS  03.0
0BDC:  GOTO   3E1
0BDD:  MOVLW  66
0BDE:  MOVWF  2D
0BDF:  CLRF   2E
0BE0:  CLRF   2F
....................    if(sicaklik>=44 && sicaklik<46){red_duty=153; green_duty=0;   blue_duty=0;} 
0BE1:  CLRF   34
0BE2:  CLRF   33
0BE3:  MOVLW  30
0BE4:  MOVWF  32
0BE5:  MOVLW  84
0BE6:  MOVWF  31
0BE7:  MOVF   2C,W
0BE8:  MOVWF  38
0BE9:  MOVF   2B,W
0BEA:  MOVWF  37
0BEB:  MOVF   2A,W
0BEC:  MOVWF  36
0BED:  MOVF   29,W
0BEE:  MOVWF  35
0BEF:  BCF    0A.3
0BF0:  CALL   3E0
0BF1:  BSF    0A.3
0BF2:  BTFSC  03.0
0BF3:  GOTO   3F6
0BF4:  BTFSS  03.2
0BF5:  GOTO   40D
0BF6:  MOVF   2C,W
0BF7:  MOVWF  34
0BF8:  MOVF   2B,W
0BF9:  MOVWF  33
0BFA:  MOVF   2A,W
0BFB:  MOVWF  32
0BFC:  MOVF   29,W
0BFD:  MOVWF  31
0BFE:  CLRF   38
0BFF:  CLRF   37
0C00:  MOVLW  38
0C01:  MOVWF  36
0C02:  MOVLW  84
0C03:  MOVWF  35
0C04:  BCF    0A.3
0C05:  CALL   3E0
0C06:  BSF    0A.3
0C07:  BTFSS  03.0
0C08:  GOTO   40D
0C09:  MOVLW  99
0C0A:  MOVWF  2D
0C0B:  CLRF   2E
0C0C:  CLRF   2F
....................    if(sicaklik>=46 && sicaklik<48){red_duty=204; green_duty=0;   blue_duty=0;} 
0C0D:  CLRF   34
0C0E:  CLRF   33
0C0F:  MOVLW  38
0C10:  MOVWF  32
0C11:  MOVLW  84
0C12:  MOVWF  31
0C13:  MOVF   2C,W
0C14:  MOVWF  38
0C15:  MOVF   2B,W
0C16:  MOVWF  37
0C17:  MOVF   2A,W
0C18:  MOVWF  36
0C19:  MOVF   29,W
0C1A:  MOVWF  35
0C1B:  BCF    0A.3
0C1C:  CALL   3E0
0C1D:  BSF    0A.3
0C1E:  BTFSC  03.0
0C1F:  GOTO   422
0C20:  BTFSS  03.2
0C21:  GOTO   439
0C22:  MOVF   2C,W
0C23:  MOVWF  34
0C24:  MOVF   2B,W
0C25:  MOVWF  33
0C26:  MOVF   2A,W
0C27:  MOVWF  32
0C28:  MOVF   29,W
0C29:  MOVWF  31
0C2A:  CLRF   38
0C2B:  CLRF   37
0C2C:  MOVLW  40
0C2D:  MOVWF  36
0C2E:  MOVLW  84
0C2F:  MOVWF  35
0C30:  BCF    0A.3
0C31:  CALL   3E0
0C32:  BSF    0A.3
0C33:  BTFSS  03.0
0C34:  GOTO   439
0C35:  MOVLW  CC
0C36:  MOVWF  2D
0C37:  CLRF   2E
0C38:  CLRF   2F
....................    if(sicaklik>=48){red_duty=255; green_duty=0;  blue_duty=0;}// kirmizi 
0C39:  CLRF   34
0C3A:  CLRF   33
0C3B:  MOVLW  40
0C3C:  MOVWF  32
0C3D:  MOVLW  84
0C3E:  MOVWF  31
0C3F:  MOVF   2C,W
0C40:  MOVWF  38
0C41:  MOVF   2B,W
0C42:  MOVWF  37
0C43:  MOVF   2A,W
0C44:  MOVWF  36
0C45:  MOVF   29,W
0C46:  MOVWF  35
0C47:  BCF    0A.3
0C48:  CALL   3E0
0C49:  BSF    0A.3
0C4A:  BTFSC  03.0
0C4B:  GOTO   44E
0C4C:  BTFSS  03.2
0C4D:  GOTO   452
0C4E:  MOVLW  FF
0C4F:  MOVWF  2D
0C50:  CLRF   2E
0C51:  CLRF   2F
....................    sayici = 0; 
0C52:  CLRF   30
0C53:  BCF    0A.3
0C54:  BCF    0A.4
0C55:  GOTO   465 (RETURN)
.................... } 
....................  
.................... void main() 
*
041F:  BSF    03.5
0420:  BSF    1F.0
0421:  BSF    1F.1
0422:  BSF    1F.2
0423:  BCF    1F.3
0424:  MOVLW  07
0425:  MOVWF  1C
0426:  BCF    03.7
0427:  MOVLW  1F
0428:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED);      
0429:  BCF    09.4
....................    
....................    
....................    setup_timer_2(T2_DIV_BY_4,255,1); 
042A:  MOVLW  00
042B:  MOVWF  78
042C:  IORLW  05
042D:  BCF    03.5
042E:  MOVWF  12
042F:  MOVLW  FF
0430:  BSF    03.5
0431:  MOVWF  12
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0432:  MOVLW  85
0433:  BCF    03.5
0434:  MOVWF  10
....................    enable_interrupts(INT_TIMER1); 
0435:  BSF    03.5
0436:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
0437:  MOVLW  C0
0438:  BCF    03.5
0439:  IORWF  0B,F
....................    
....................    set_tris_a(0x01); 
043A:  MOVLW  01
043B:  BSF    03.5
043C:  MOVWF  05
....................     
....................    set_tris_e(0b000); 
043D:  BCF    09.0
043E:  BCF    09.1
043F:  BCF    09.2
....................       
....................    setup_adc(adc_clock_internal); 
0440:  BCF    1F.6
0441:  BCF    03.5
0442:  BSF    1F.6
0443:  BSF    1F.7
0444:  BSF    03.5
0445:  BSF    1F.7
0446:  BCF    03.5
0447:  BSF    1F.0
....................    setup_adc_ports(AN0); 
0448:  BSF    03.5
0449:  BCF    1F.0
044A:  BSF    1F.1
044B:  BSF    1F.2
044C:  BSF    1F.3
....................    
....................    lcd_init();   
044D:  BCF    03.5
044E:  GOTO   0FB
....................  
....................    set_adc_channel(0);  
044F:  MOVLW  00
0450:  MOVWF  78
0451:  MOVF   1F,W
0452:  ANDLW  C7
0453:  IORWF  78,W
0454:  MOVWF  1F
....................    delay_us(20);         
0455:  MOVLW  06
0456:  MOVWF  77
0457:  DECFSZ 77,F
0458:  GOTO   457
0459:  NOP
....................  
....................    printf(lcd_putc,"\fSICAKLIK"); 
045A:  MOVLW  8F
045B:  BSF    03.6
045C:  MOVWF  0D
045D:  MOVLW  00
045E:  MOVWF  0F
045F:  BCF    03.6
0460:  CALL   16C
....................      
....................    
....................    for(;;)  
....................    { 
....................       
....................       adc();          
0461:  GOTO   22C
....................       lcd(); 
0462:  GOTO   3B7
....................       
....................       rgb(); 
0463:  BSF    0A.3
0464:  GOTO   000
0465:  BCF    0A.3
0466:  GOTO   461
....................    } 
....................     
.................... } 
....................  
0467:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
